#if !defined(FISICA)
#define FISICA

/** @brief Calcula la ley de Hooke
 * @param k Constante de resorte
 * @param l Longitud de resorte
 * @returns k * l
 * @author Rodrigo Vega Mora
 */
double hooke(const double& k, const double& l);

/** @brief Calcula la 2da ley de Newton
 * @param a Aceleracion
 * @param m Masa
 * @returns m * a
 * @author Rodrigo Vega Mora
 */
double newtontwo(const double& a, const double& m);

/** @brief Calcula el momento de fuerza (Torque)
 * @param F Módulo del vector fuerza
 * @param M Módulo del vector distancia
 * @returns F * M
 * @author Rodrigo Vega Mora
 */
double torque(const double& F, const double& M);

/** @brief Capacidad calorifica en C°
 *  @param Q Incremento de calor en calorias 
 *  @param T  Incremento de temperatura en C°
 *  @returns double Q/T en C°
 *  @author Natalia Victoria Nava 
 */
double calor(const double& Q, const double& T);

/** @brief Calcula la longitud de onda en metros 
 *  @param v Velocidad de onda  expresada en m/s
 *  @param f  Frecuencia espresada en Hz
 *  @returns double v/f en m
 *  @author Natalia Victoria Nava
 */
double longitud(const double& v, const double& f);

/** @brief Calcula la aceleracion
 *  @param velocidadInicial Velocidad inicial
 *  @param velocidadFinal  Velocidad Final
 *  @param tiempo  Tiempo
 *  @returns (vf-vi)/t
 *  @author Brayan Fernando Morales Morales
 */
double aceleracion(const double& velocidadInicial, const double& velocidadFinal ,const double& tiempo);

/** @brief Calcula el rendimiento
 *  @param energia_totall Energia Total
 *  @param energia_Util  Energia Util
 *  @returns eu/eT
 *  @author Brayan Fernando Morales Morales
 */
double rendimiento(const double& energia_total ,const double& energia_Util);

#endif